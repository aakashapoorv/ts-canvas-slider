{"version":3,"sources":["src/CanvasRenderer.ts","src/DragHandler.ts","src/ImageLoader.ts","src/SceneRenderer.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.e2440e3b.js","sourceRoot":"..","sourcesContent":["export default function renderCanvas(domId: string, width: number, height: number): HTMLCanvasElement {\n    const canvas = document.getElementById(domId) as HTMLCanvasElement;\n\n    if (!canvas) {\n        throw new Error(`Element with id \"${domId}\" not found.`);\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    canvas.addEventListener(\"selectstart\", (e: Event) => {\n        e.preventDefault();\n    });\n\n    return canvas;\n}","export default function handleDrag(domEl: HTMLElement, callback: (x: number, y: number) => void): void {\n    let x = 0;\n    let y = 0;\n\n    const startDrag = (e: MouseEvent) => {\n        x = e.pageX;\n        y = e.pageY;\n        domEl.classList.add(\"drag-active\");\n        window.addEventListener(\"mousemove\", updateDrag);\n        window.addEventListener(\"mouseup\", endDrag);\n    };\n\n    const updateDrag = (e: MouseEvent) => {\n        callback(x - e.pageX, y - e.pageY);\n        x = e.pageX;\n        y = e.pageY;\n    };\n\n    const endDrag = () => {\n        domEl.classList.remove(\"drag-active\");\n        window.removeEventListener(\"mousemove\", updateDrag);\n        window.removeEventListener(\"mouseup\", endDrag);\n    };\n\n    domEl.addEventListener(\"mousedown\", startDrag);\n};","import {\n    ImageLoader\n} from './interfaces/ImageLoader';\n\nexport default function imageLoader(imagePath: string, numImages: number): ImageLoader {\n\n    function getImage(idx: number, callback: (img: HTMLImageElement | null) => void): void {\n        if (!(0 > idx || idx >= numImages)) {\n            let img = document.createElement(\"img\");\n            img.onload = function () {\n                callback(img);\n            }\n            img.onerror = function () {\n                console.error('Failed to load image at ' + imagePath + \"/\" + idx + \".jpg\");\n                callback(null);\n            }\n            img.src = imagePath + \"/\" + idx + \".jpg\";\n        }\n    };\n\n    function getImages(indeces: number[], callback: (images: (HTMLImageElement | null)[]) => void): void {\n        let images: (HTMLImageElement | null)[] = [];\n        let numLoaded = 0;\n\n        indeces = Array.from(new Set(indeces));\n\n        let imageLoaded = function (img: HTMLImageElement | null, idx: number) {\n            images[idx] = img;\n            numLoaded++;\n\n            if (numLoaded === indeces.length) {\n                callback(images);\n            }\n        };\n\n        for (let i = 0; i < indeces.length; i++) {\n            let idx = indeces[i];\n            getImage(idx, function (img) {\n                imageLoaded(img, i);\n            });\n        }\n    };\n\n    function getNumImages(): number {\n        return numImages;\n    };\n\n    return {\n        getImage,\n        getImages,\n        getNumImages\n    };\n}","import {\n  ImageLoader\n} from './interfaces/ImageLoader';\nimport {\n  SceneRenderer\n} from './interfaces/SceneRenderer';\n\nexport default function createSceneRenderer(canvas: HTMLCanvasElement, imageLoader: ImageLoader): SceneRenderer {\n  const ctx = canvas.getContext(\"2d\") !;\n  const aspect = canvas.width / canvas.height;\n  const sceneWidth = imageLoader.getNumImages() * canvas.width;\n  let lastRendered: number | null = null;\n\n  function indecesForOffset(offset: number): number[] {\n    return [\n      Math.floor(offset / sceneWidth * imageLoader.getNumImages()),\n      Math.ceil(offset / sceneWidth * imageLoader.getNumImages())\n    ];\n  }\n\n  function padPreload(indeces: number[]): number[] {\n    const last = indeces[indeces.length - 1];\n    if (last + 1 < imageLoader.getNumImages()) {\n      indeces.push(last + 1);\n    }\n    return indeces;\n  }\n\n  function scaleForImage(image: HTMLImageElement): number {\n    const imageAspect = image.width / image.height;\n    if (imageAspect >= aspect) {\n      return canvas.width / image.width;\n    } else if (aspect > imageAspect) {\n      return canvas.height / image.height;\n    }\n    return 0;\n  }\n\n  function renderImage(image: HTMLImageElement, offset: number) {\n    const s = scaleForImage(image);\n    const width = image.width * s;\n    const height = image.height * s;\n    const x = offset + (canvas.width - width) / 2;\n    const y = (canvas.height - height) / 2;\n    ctx.drawImage(image, Math.round(x), Math.round(y), Math.round(width), Math.round(height));\n  }\n\n  return function (slideOffset: number) {\n    if (lastRendered !== slideOffset) {\n      const indeces = padPreload(indecesForOffset(slideOffset));\n      const left = slideOffset - indeces[0] * canvas.width;\n      imageLoader.getImages(indeces, function (images) {\n        requestAnimationFrame(function () {\n          ctx.fillStyle = \"rgb(242, 242, 242)\";\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          for (let i = 0; i < images.length; i++) {\n            console.log(JSON.stringify(images));\n            const image = images[i];\n            if (image) { // Check if image is not undefined\n              renderImage(image, canvas.width * i - left);\n            } else {\n              console.log('Image at index ' + i + ' is undefined.');\n            }\n          }\n        });\n      });\n      lastRendered = slideOffset;\n    }\n  };\n}","import renderCanvas from './CanvasRenderer';\nimport handleDrag from './DragHandler';\nimport imageLoader from './ImageLoader';\nimport createSceneRenderer from './SceneRenderer';\nimport {\n    ImageLoader\n} from './interfaces/ImageLoader';\n\nlet canvas: HTMLCanvasElement = renderCanvas(\"image_slider\", 640, 400);\n\nlet myImageLoader: ImageLoader = imageLoader(\"images\", 4);\n\nlet myRenderScene: (slideOffset: number) => void = createSceneRenderer(canvas, myImageLoader);\n\nlet slideOffset: number = 0;\nlet sceneWidth: number = myImageLoader.getNumImages() * canvas.width;\n\nmyRenderScene(slideOffset);\n\nhandleDrag(canvas, function (dx: number, _: number) {\n    slideOffset += dx;\n    slideOffset = Math.max(0, slideOffset);\n    slideOffset = Math.min(slideOffset, sceneWidth - canvas.width);\n\n    requestAnimationFrame(function () {\n        myRenderScene(slideOffset);\n    });\n});"]}